# Stop node scaler from nodes
- hosts: nodes
  become: "{{ 'no' if container_engine == 'apptainer' else 'yes' }}"
  gather_facts: no
  ignore_unreachable: yes  # we ignore unreachable hosts because in SLURM environments (or similar) hosts might have been shut down before stopping services
  tags: never

  vars_files:
    - vars/main.yml
    - config/config.yml

  environment:
    BDWATCHDOG_PATH: "{{ bdwatchdog_path }}"
    RESCALING_PATH: "{{ serverless_containers_path }}/scripts/"
    PYTHONPATH: ":{{ serverless_containers_path }}"

  tasks:
  - import_tasks: tasks/utils/get_tmux_sessions.yml
    tags: stop_node_scaler, stop_services

  - name: Stop node scaler
    shell: bash scripts/services/node_scaler/stop.sh
    when: "tmux_sessions is not none and 'node_scaler' in tmux_sessions"
    args:
      chdir: "{{ serverless_containers_path }}"
      executable: /bin/bash
    tags: stop_node_scaler, stop_services

# Stop services from server
- hosts: localhost
  become: no
  gather_facts: no
  tags: never

  vars_files:
    - vars/main.yml
    - config/config.yml

  tasks:
  - import_tasks: tasks/utils/get_tmux_sessions.yml
    tags: stop_opentsdb, stop_services

  - name: Stop OPENTSDB
    shell: bash stop.sh
    when: "'OPENTSDB' in tmux_sessions"
    args:
      chdir: "{{ bdwatchdog_path }}/deployment/metrics"
      executable: /bin/bash
    tags: stop_opentsdb

  - name: Stop Redis DB
    when: "'redis_server' in tmux_sessions"
    shell: ./redis-cli shutdown
    args:
      chdir: "{{ installation_path }}/redis/src"
      executable: /bin/bash
    tags: stop_services

  - name: Stop other services
    when: "item in tmux_sessions"
    shell: "tmux kill-session -t {{ item }}"
    args:
      executable: /bin/bash
    loop:
      # ServerlessYARN
      - rebooter
      - celery
      - web_interface
      # ServerlessContainers
      - rebalancer
      - sanity_checker
      - refeeder
      - scaler
      - guardian
      - energy_controller
      - structure_snapshoter
      - database_snapshoter
      - watt_wizard
      - watt_trainer
      - orchestrator
    tags: stop_services

# Stop services from server and nodes
- hosts: platform_management,nodes
  become: no
  gather_facts: no
  ignore_unreachable: yes  # we ignore unreachable hosts because in SLURM environments (or similar) hosts might have been shut down before stopping services
  tags: never

  vars_files:
    - vars/main.yml
    - config/config.yml

  tasks:
  - name: Clean logs
    block:
      - name: Clean logs from server
        delegate_to: localhost
        run_once: yes
        file:
          path: "{{ item }}"
          state: absent
        with_items: # it is important to use 'with_items' here to flatten lists
          # ServerlessYARN
          - "{{ lookup('fileglob', 'services/rebooter/rebooter_*.log', wantlist=True) }}"
          - "{{ lookup('fileglob', 'services/celery/celery_*.log', wantlist=True) }}"
          # ServerlessContainers
          - "{{ lookup('fileglob', serverless_containers_path ~ '/*.log*', wantlist=True) }}"
          # Artifact directory (generated by python ansible-runner executions)
          - artifacts

      - name: Clean logs from nodes
        when: inventory_hostname in groups.nodes
        file:
          path: "{{ item }}"
          state: absent
        with_items:
          # Temporary dirs
          - "{{ app_ssh_keys_dir }}"

      - name: Clean logs from server and nodes
        file:
          path: "{{ item }}"
          state: absent
        with_items:
          # Temporary dirs
          - "{{ ansible_async_dir }}"
          - "{{ tmpdir }}"

    tags: clean_logs