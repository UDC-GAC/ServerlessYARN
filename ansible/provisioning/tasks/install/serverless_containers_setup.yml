
## ServerlessContainers Requirements
- name: Install prerequisites for Serverless Containers (root)
  when: "virtual_mode"
  apt:
    name:
     - python3-pip
     - gunicorn
     - jq
    state: latest
    update_cache: yes

- name: Install yq (root)
  when: "virtual_mode"
  snap:
    name: yq
    state: present

- name: Install prerequisites for Serverless Containers (non-root)
  throttle: 1
  when: "not virtual_mode"
  pip:
    name:
     - gunicorn
     - yq
    executable: pip3

- name: Verify jq installation (non-root)
  shell: "which jq"
  register: jq_check
  ignore_errors: true

- name: Install jq (non-root)
  when: "not virtual_mode and jq_check.rc != 0"
  block:
    - name: Install jq (non-root)
      shell: curl -sS https://webi.sh/jq | sh
      args:
        executable: /bin/bash

    - name: Remove residual directory created by jq installation
      shell: rmdir -p Downloads/webi/jq/*
      args:
        chdir: "$HOME"
        executable: /bin/bash
      ignore_errors: true

- name: Set permanent modules for cluster nodes
  when: "not virtual_mode and 'nodes' in group_names"
  include_tasks: tasks/install/modules_setup.yml
  loop:
    - gnu8/8.3.0
    - python/3.8.13
    - jdk/openjdk/8u382

# We use throttle on pip installs to avoid dependency issues with multiple hosts installing simultaneously on shared $HOME folder
- name: Install specified python requirements
  throttle: 1
  pip:
    requirements: "{{ playbook_dir }}/ServerlessContainers/requirements.txt"
    executable: pip3

- name: Check if OpenSSL is installed
  command: which openssl
  register: openssl_check
  ignore_errors: yes

- name: Fail if OpenSSL is not installed
  fail:
    msg: "OpenSSL is not installed, please install it (preferably OpenSSL 1.1.1 or higher)"
  when: openssl_check.rc != 0

- name: Get OpenSSL version
  command: openssl version
  register: openssl_version
  when: openssl_check.rc == 0

- name: Extract OpenSSL version number
  set_fact:
    openssl_version_number: "{{ openssl_version.stdout.split(' ')[1] }}"
  when: openssl_check.rc == 0

# urllib3 v2.0 only supports OpenSSL 1.1.1+
- name: Downgrade urllib3 to avoid incompatibilities with SSL version
  throttle: 1
  pip:
    name: urllib3==1.26.0
    executable: pip3
  when: openssl_check.rc == 0 and openssl_version_number is version('1.1.1', '<')

## Copy SC directory and template configuration
- block:
  - name: Copy ServerlessContainers
    synchronize:
      src: ServerlessContainers/
      dest: "{{ serverless_containers_path }}"
      recursive: true

  - name: Copy service aliases and port configuration to ServerlessContainers dir
    template:
      src: templates/sc_config/services_config.yml
      dest: "{{ serverless_containers_path }}/services_config.yml"

  - name: Copy custom env file in ServerlessContainers to avoid using yq
    template:
      src: templates/sc_config/set_env.sh
      dest: "{{ serverless_containers_path }}/scripts/orchestrator/set_env.sh"
    when: "not virtual_mode"

  - name: Copy ServerlessContainers services configuration
    template:
      src: "templates/sc_config/services.py"
      dest: "{{ serverless_containers_path }}/conf/StateDatabase/services.py"

  - name: Copy ServerlessContainers rules configuration
    template:
      src: "templates/sc_config/rules.py"
      dest: "{{ serverless_containers_path }}/conf/StateDatabase/rules.py"
  tags: restart_services


## WattWizard configuration
- block:
  - name: Copy WattWizard configuration to ServerlessContainers dir
    delegate_to: localhost
    run_once: true
    template:
      src: templates/power_budgeting/wattwizard/config.yml
      dest: "{{ serverless_containers_path }}/src/WattWizard/config.yml"

  - name: Verify that the InfluxDB server is reachable
    delegate_to: localhost
    run_once: true
    wait_for:
      host: "{{ influxdb_host }}"
      port: 8086
      timeout: 30

  - name: Clean WattWizard timestamps directory
    delegate_to: localhost
    run_once: true
    file:
      state: "{{ item }}"
      path: "{{ serverless_containers_path }}/conf/WattWizard/timestamps/train/default"
      owner: "{{ user_info.user_name }}"
    with_items:
      - absent
      - directory

  - name: Copy WattWizard timestamp files to create models
    delegate_to: localhost
    run_once: true
    copy:
      src: "templates/power_budgeting/wattwizard/timestamps/{{ modelled_cpu }}/{{ item }}/"
      dest: "{{ serverless_containers_path }}/conf/WattWizard/timestamps/train/default/"
      owner: "{{ user_info.user_name }}"
    with_items:
      - "default"
      - "hw_aware"
  when: "power_budgeting and power_modelling"
  tags: restart_services
