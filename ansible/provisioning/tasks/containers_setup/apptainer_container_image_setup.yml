## TODO: if base image is created but children images already exist, delete them and re-create them
- name: Image creation
  delegate_to: localhost
  run_once: yes
  tags: create_app
  vars:
    ## item in this context is 'app_type'
    - definition_file: "{{ definition_mapping[item] }}"
    - image_file: "{{ image_mapping[item] }}"
    - app_base_type: "{{ image_dependencies[item] }}"
    - app_base_image_file: "{{ image_mapping[app_base_type] if app_base_type != '' }}" # will be used in the definition image templates
    - app_directory: "apps/{{ app_dir if item == 'generic_app' else item }}"
  block:
    - name: Check if app image already exists
      stat:
        path: "{{ installation_path }}/{{ app_directory }}/{{ image_file }}"
        get_checksum: false
        get_mime: false
        get_attributes: false
      register: stat_server_image_output

    - name: Create app image
      when: not stat_server_image_output.stat.exists
      block:
        - name: Create app directory in server
          file:
            path: "{{ installation_path }}/{{ app_directory }}"
            state: directory

        - name: Copy app definition file
          template:
            src: "templates/apps/{{ definition_file }}"
            dest: "{{ installation_path }}/{{ app_directory }}/{{ definition_file }}"

        ## Copy other files
        # Install script
        - name: Copy app install script if applicable
          when: install_script is defined and install_script != ''
          template:
            src: "{{ app_directory }}/{{ install_script }}"
            dest: "{{ installation_path }}/{{ app_directory }}/"

        # Optional files directory
        - name: Copy files from optional directory if applicable
          when: files_dir is defined and files_dir != ''
          block:
            - name: Copy app optional files directory
              copy:
                src: "{{ app_directory }}/{{ files_dir }}"
                dest: "{{ installation_path }}/{{ app_directory }}/"

            - name: Find config files to template in the app directory
              find:
                paths: "{{ app_directory }}/{{ files_dir }}"
                recurse: yes
              register: found_config_files

            - name: Process template for each config file
              template:
                src: "{{ file.path }}"
                dest: "{{ installation_path }}/{{ app_directory }}/{{ files_dir }}/{{ file.path | regex_replace('^' + app_directory + '/' + files_dir, '') }}"
              loop: "{{ found_config_files.files }}"
              loop_control:
                loop_var: file ## we need to change this inner loop variable to avoid collisions re-using the 'item' variable from the outer loop

        # Hadoop files
        - name: Copy necessary files for hadoop apps
          when: "item == 'hadoop_app'"
          copy:
            src: "{{ app_directory }}/{{ file }}"
            dest: "{{ installation_path }}/{{ app_directory }}/"
          with_items:
            - setup.sh
            - java_snitch.sh
            - files_dir
          loop_control:
            loop_var: file

        - name: Build app image
          shell: "{{ singularity_command_alias }} build {{ app_directory }}/{{ image_file }} {{ app_directory }}/{{ definition_file }}"
          args:
            chdir: "{{ installation_path }}"
            executable: /bin/bash
            creates: "{{ app_directory }}/{{ image_file }}"
