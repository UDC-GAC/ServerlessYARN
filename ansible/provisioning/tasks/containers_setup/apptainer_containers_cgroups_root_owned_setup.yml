## General setup
- name: General containers setup
  tags: create_app
  block:
    - name: Create images directory
      file:
        path: "{{ installation_path }}/images"
        state: directory

    - name: Copy apptainer containers cgroup config
      template:
        src: "templates/{{ cgroups_file }}"
        dest: "{{ installation_path }}/{{ cgroups_file }}"

    ## Workaround to get the right permissions on root-owned cgroups files
    - name: Copy cgroups permission changer script
      synchronize:
        src: scripts/change_cgroups_permissions.py
        dest: "{{ installation_path }}/change_cgroups_permissions.py"
        perms: true

    - name: Copy app image to host
      synchronize:
        src: "{{ installation_path }}/{{ app_directory }}/{{ image_file }}"
        dest: "{{ installation_path }}/images/"
        perms: true

- name: Containers startup
  tags: start_containers
  block:
    - name: Create directories to bind to containers
      shell: "
        {% for item in containers_info %}
          {% if item.host == inventory_hostname %}
            {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
            mkdir -p {{ bind_dir }}/{{ item.container_name }} &&
          {% endif %}
        {% endfor %}true"
      args:
        executable: /bin/bash

    - name: Check containers status
      shell: "sudo {{ singularity_command_alias }} instance list -j"
      args:
        executable: /bin/bash
      register: apptainer_list_output

    - name: Start apptainer containers
      shell: "
        {% for item in containers_info %}
          {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
            {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
            sudo {{ singularity_command_alias }} instance start -C --net --network {{ network }} \
              --hostname {{ item.container_name }} --apply-cgroups {{ cgroups_file }} \
              --bind {{ bind_dir }}/{{ item.container_name }}:{{ bind_dir_on_container }} \
              images/{{ image_file }} {{ item.container_name }} && 
          {% endif  %}
        {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
      vars:
        network: "{{ mode }}_{{ inventory_hostname }}{{ ',ptp' if mode == 'ipvlan' else '' }}"

    ## Power budgeting specific
    - name: Power budgeting specific setup
      when: "power_budgeting"
      block:
        - name: Get containers PID mapping on each host
          shell: "
            {% for item in containers_info %}
              {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
                echo -n \"{{ item.container_name }}:$(sudo {{ singularity_command_alias }} instance list {{ item.container_name }} | grep {{ item.container_name }} | awk '{print $2}'),\" &&
              {% endif %}
            {% endfor %}true"
          args:
            chdir: "{{ installation_path }}"
            executable: /bin/bash
          register: container_pid_output

        - name: Declare containers PID mapping on each host
          set_fact:
            containers_pid_mapping: "{{ container_pid_output.stdout | default('') }}"

        - name: Concatenate all hosts PID mapping
          delegate_to: localhost
          run_once: yes
          set_fact:
            all_containers_pid_mapping: "{{ all_containers_pid_mapping | default('') + hostvars[item].containers_pid_mapping }}"
          loop: "{{ groups['nodes'] }}"

        - name: Write containers PID mapping
          delegate_to: localhost
          run_once: yes
          when: "all_containers_pid_mapping != ''"
          lineinfile:
            path: "{{ containers_pid_mapping_file }}"
            line: "{{ item }}"
            create: yes
          loop: "{{ all_containers_pid_mapping[:-1].split(',') }}"

    # - name: Clean apptainer containers bind directory
    #   shell: "
    #     {% for item in containers_info %}
    #       {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
    #         {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
    #         sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c 'rm -rf  {{ bind_dir_on_container }}/*' &&
    #       {% endif  %}
    #     {% endfor %}true"
    #   args:
    #     chdir: "{{ installation_path }}"
    #     executable: /bin/bash

    - name: Setup host resolution in containers and change cgroups permissions
      shell: "
        {% for item in containers_info %}
          {% if item.host == inventory_hostname %}
            {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
            cp /etc/hosts {{ bind_dir }}/{{ item.container_name }}/hosts \
            && sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
            'echo {{ server_ip }} opentsdb >> /etc/hosts \
            && cat {{ bind_dir_on_container }}/hosts >> /etc/hosts \
            && rm {{ bind_dir_on_container }}/hosts' \
            && python3 change_cgroups_permissions.py {{ cgroups_version }} {{ singularity_command_alias }} {{ singularity_cgroups_group }} {{ item.container_name }} &&
          {% endif  %}
        {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
