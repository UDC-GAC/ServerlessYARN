## General setup
- name: General containers setup
  tags: create_app
  block:
    - name: Create images directory
      file:
        path: "{{ installation_path }}/images"
        state: directory

    - name: Copy apptainer containers cgroup config
      template:
        src: "templates/{{ cgroups_file }}"
        dest: "{{ installation_path }}/{{ cgroups_file }}"

    ## Workaround to get the right permissions on root-owned cgroups files
    - name: Copy cgroups permission changer script
      synchronize:
        src: scripts/change_cgroups_permissions.py
        dest: "{{ installation_path }}/change_cgroups_permissions.py"
        perms: true

    - name: Copy app image to host
      synchronize:
        src: "{{ installed_app_directory }}/{{ image_file }}"
        dest: "{{ installation_path }}/images/"
        perms: true

- name: Containers startup
  tags: start_containers
  block:
    - name: Create directories to bind to containers
      shell: "
        {% for item in containers_info %}
          {% if item.host == inventory_hostname %}
            {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
            mkdir -p {{ bind_dir }}/{{ item.container_name }} &&
          {% endif %}
        {% endfor %}true"
      args:
        executable: /bin/bash

    - name: Check containers status
      shell: "sudo {{ singularity_command_alias }} instance list -j"
      args:
        executable: /bin/bash
      register: apptainer_list_output

    - name: Start apptainer containers
      shell: "
        {% for item in containers_info %}
          {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
            {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
            sudo {{ singularity_command_alias }} instance start -C --net \ 
              --network {% if not 'expose_ptp' in item %}{{ network }}{% else %}{{ exposed_ptp_network }}{% endif %} \
              {% if 'portmap' in item %}--network-args {{ item.portmap }}{% endif %} \
              --hostname {{ item.container_name }} --apply-cgroups {{ cgroups_file }} \
              --bind {{ bind_dir }}/{{ item.container_name }}:{{ bind_dir_on_container }}{% if 'secondary_bind' in item %},{{ item.secondary_bind }}{% endif %} \
              images/{{ image_file }} {{ item.container_name }} && 
          {% endif  %}
        {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
      vars:
        network: "{{ mode }}_{{ inventory_hostname }}{{ ',ptp' if mode == 'ipvlan' else '' }}"
        exposed_ptp_network: "{{ 'ptp,' if mode == 'ipvlan' else '' }}{{ mode }}_{{ inventory_hostname }}"

    # TODO: create 'output_dir' parameter in apps to safely store output data and avoid deleting it with this task
    # - name: Clean apptainer containers bind directory
    #   shell: "
    #     {% for item in containers_info %}
    #       {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
    #         {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
    #         sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c 'rm -rf  {{ bind_dir_on_container }}/*' &&
    #       {% endif  %}
    #     {% endfor %}true"
    #   args:
    #     chdir: "{{ installation_path }}"
    #     executable: /bin/bash

    - name: Setup host resolution in containers + HOME directory for regular user and change cgroups permissions
      shell: "
        {% for item in containers_info %}
          {% if item.host == inventory_hostname %}
            {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
            cp /etc/hosts {{ bind_dir }}/{{ item.container_name }}/hosts \
            && sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
              'echo {{ server_ip }} opentsdb data_server >> /etc/hosts \
              && cat {{ bind_dir_on_container }}/hosts >> /etc/hosts \
              && chown {{ user_info.user_name }} {{ user_home_on_container }} \
              && chmod 0755 {{ user_home_on_container }}' \
            && rm {{ bind_dir }}/{{ item.container_name }}/hosts
            && python3 change_cgroups_permissions.py {{ cgroups_version }} {{ singularity_command_alias }} {{ singularity_cgroups_group }} {{ item.container_name }} &&
          {% endif  %}
        {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
