
- name: Start SelfWatts controller inside an apptainer/singularity container
  block:
    - name: Check if SelfWatts controller image already exists
      stat:
        path: "{{ selfwatts_controller_path }}/image/{{ image_file }}"
        get_checksum: false
        get_mime: false
        get_attributes: false
      register: stat_output

    - name: Copy SelfWatts controller container definition file
      when: not stat_output.stat.exists
      template:
        src: "templates/power_budgeting/monitoring/sensor/{{ definition_file }}"
        dest: "{{ selfwatts_controller_path }}/image/{{ definition_file }}"

    - name: Copy SelfWatts controller configuration files
      when: not stat_output.stat.exists
      template:
        src: "templates/power_budgeting/monitoring/sensor/config/{{ item }}"
        dest: "{{ selfwatts_controller_path }}/config/{{ item }}"
      with_items:
        - controller.py
        - database.py
        - invoker.py
        - CMakeLists.txt
        - target.h
        - target.c
        - target_apptainer.h
        - target_apptainer.c

    - name: Build image
      when: not stat_output.stat.exists
      shell: "{{ singularity_command_alias }} build image/{{ image_file }} image/{{ definition_file }}"
      args:
        chdir: "{{ selfwatts_controller_path }}"
        executable: /bin/bash
        creates: "image/{{ image_file }}"

    - name: Check containers status when restarting
      shell: "sudo {{ singularity_command_alias }} instance list -j"
      register: apptainer_list_output
      args:
        executable: /bin/bash
      tags: never, restart_selfwatts_controller

    - name: Stop current SelfWatts controller apptainer container
      shell: "sudo {{ singularity_command_alias }} instance stop {{ container_name }}"
      when: "container_name in apptainer_list_output.stdout"
      args:
        chdir: "{{ selfwatts_controller_path }}"
        executable: /bin/bash
      tags: never, restart_selfwatts_controller

    - name: Check containers status
      shell: "sudo {{ singularity_command_alias }} instance list -j"
      register: apptainer_list_output
      args:
        executable: /bin/bash

    - name: Start SelfWatts controller apptainer container
      shell: "sudo {{ singularity_command_alias }} instance start -C --net --network {{ mode }}_{{ inventory_hostname }}{{ extra_connection }} --bind /proc:/proc --bind /sys:/sys --bind {{ sensor_reporting_path }}:/reporting image/{{ image_file }} {{ container_name }}"
      when: "container_name not in apptainer_list_output.stdout"
      args:
        chdir: "{{ selfwatts_controller_path }}"
        executable: /bin/bash
      vars:
        extra_connection: "{{ ',ptp' if mode == 'ipvlan' else '' }}"

  when: "container_engine == 'apptainer'"
  vars:
    - definition_file: "selfwatts-controller.def"
    - image_file: "selfwatts-controller.sif"
    - container_name: "sensor-{{ inventory_hostname }}"

- name: Start SelfWatts controller inside a lxc container
  debug:
    msg: 'SelfWatts controller inside a lxc container not yet supported'
  when: "container_engine == 'lxc'"
