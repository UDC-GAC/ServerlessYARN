# Setup server
- name: Launch services from server node
  hosts: localhost
  become: no
  gather_facts: no

  vars_files:
    - vars/main.yml
    - config/config.yml

  vars:
    # change admin password both here and in config/debian_couchdb_conf.dat to effectively change it
    ## TODO: centralize this password
    - couchdb_admin_pass: admin

  environment:
    INSTALLATION_PATH: "{{ installation_path }}"
    BDWATCHDOG_PATH: "{{ bdwatchdog_path }}"
    SERVERLESS_PATH: "{{ serverless_containers_path }}"
    PYTHONPATH: "{{ bdwatchdog_path }}:{{ serverless_containers_path }}"
    CELERY_BROKER: "redis://127.0.0.1:6379/0"
    CELERY_BACKEND: "redis://127.0.0.1:6379/0"

  tasks:
    - import_tasks: tasks/launch/opentsdb_launch.yml
      tags: start_opentsdb

    - import_tasks: tasks/launch/serverless_containers_launch.yml
      vars:
        - nodes: "{{ host_list | split(',') if host_list is defined else groups['nodes'] }}"
        - containers_info_str: >
              {%- set containers_info=[] -%}
              {%- for host in nodes -%}
                {%- for container_name in hostvars[host].containers -%}
                  {%- set container_info = dict() -%}
                    {{ container_info.update({'container_name': container_name, 'host': host, 'cpu_max': max_cpu_percentage_per_container, 'cpu_min': min_cpu_percentage_per_container, 'mem_max': max_memory_per_container, 'mem_min': min_memory_per_container, 'cpu_boundary': cpu_boundary, 'cpu_boundary_type': cpu_boundary_type, 'mem_boundary': mem_boundary, 'mem_boundary_type': mem_boundary_type }) }}
                    {%- if disk_capabilities and disk_scaling and hostvars[host].disks|length > 0 -%}
                      {%- set first_disk = hostvars[host].disks | first -%}
                      {{ container_info.update( {'disk': first_disk, 'disk_path': hostvars[host].disks[first_disk]['path'], 'disk_max': max_diskbw_per_container, 'disk_min': min_diskbw_per_container, 'disk_boundary': disk_boundary, 'disk_boundary_type': disk_boundary_type}) }}
                    {%- endif -%}
                    {%- if power_budgeting -%}
                      {{ container_info.update({'energy_max': max_energy_per_container, 'energy_min': min_energy_per_container, 'energy_boundary': energy_boundary, 'energy_boundary_type': energy_boundary_type}) }}                      
                    {%- endif -%}
                    {{ containers_info.append(container_info) }}
                {%- endfor -%}
              {%- endfor -%}
              {{ containers_info }} 
        - containers_info: "{{ containers_info_str | replace('\n','') | replace(' ','') }}"

    - import_tasks: tasks/launch/serverlessyarn_services_launch.yml

    - block:
      - import_tasks: tasks/launch/mongodb_launch.yml
        tags: start_mongodb,start_smartwatts,start_selfwatts

      - import_tasks: tasks/launch/smartwatts_launch.yml
        when: "power_meter == 'smartwatts'"
        tags: start_smartwatts

      - import_tasks: tasks/launch/selfwatts_launch.yml
        when: "power_meter == 'selfwatts'"
        tags: start_selfwatts
      when: "power_budgeting"

# Setup nodes
- name: Launch services from hosts
  hosts: nodes

  vars_files:
    - vars/main.yml
    - config/config.yml

  tasks:
    - import_tasks: tasks/launch/hwpc-sensor_launch.yml
      when: "power_budgeting"
      tags: start_hwpc_sensor
