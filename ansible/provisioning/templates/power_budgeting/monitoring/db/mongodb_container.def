Bootstrap: docker
From: mongo:latest

%environment
    export MONGODB_DATA=/data/db

%files
    {{ mongodb_path }}/config/mongodb.conf /etc/mongodb.conf

%runscript
    # Clean MongoDB data directory
    mkdir -p ${MONGODB_DATA}
    rm -rf ${MONGODB_DATA}/*

    # Start MongoBD in ReplicaSet mode
    echo "Starting MongoDB..."
    mongod --bind_ip_all --config /etc/mongodb.conf > /dev/null 2>&1 &

    # Give some time for MongoDB to initialise
    sleep 2

    # Initiate Replica Set (only one node, so it will be the Primary)
    mongosh --host {{ mongodb_url }} --port {{ mongodb_port }} --eval "rs.initiate()"

    sleep 2

    # Set MongoDB address/port to be reachable from other nodes
    mongosh --host {{ mongodb_url }} --port {{ mongodb_port }} --eval 'cfg=rs.conf(); cfg.members[0].host="{{ mongodb_url }}:{{ mongodb_port }}"; rs.reconfig(cfg, {force: true})'

%startscript
    # Clean MongoDB data directory
    mkdir -p ${MONGODB_DATA}
    rm -rf ${MONGODB_DATA}/*

    # Start MongoBD in ReplicaSet mode
    echo "Starting MongoDB..."
    mongod --bind_ip_all --config /etc/mongodb.conf > /dev/null 2>&1 &

    # Give some time for MongoDB to initialise
    sleep 2

    # Initiate Replica Set (as only one node is used, it will always be the Primary node)
    mongosh --host {{ mongodb_url }} --port {{ mongodb_port }} --eval "rs.initiate()"

    sleep 2

    # Set MongoDB address/port to be reachable from other nodes
    mongosh --host {{ mongodb_url }} --port {{ mongodb_port }} --eval 'cfg=rs.conf(); cfg.members[0].host="{{ mongodb_url }}:{{ mongodb_port }}"; rs.reconfig(cfg, {force: true})'
